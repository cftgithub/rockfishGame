{"version":3,"sources":["components/Title/index.js","components/FishCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","title","instruction","good","unknown","vulnerable","threatened","endangered","currentScore","highScore","FishCard","onClick","removeFish","id","alt","species","src","image","Wrapper","children","App","state","fish","resetFish","score","clickCount","hiCount","newHiCount","setState","releaseFish","console","log","catchFish","alert","sort","Math","random","filter","status","commonName","clickCountToZero","this","map","key","scientific","sciName","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d36aaaf2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return (\n    <>\n      <div>\n        <h1 className=\"title\">{props.title}</h1>\n        <h3 className=\"instruction\">{props.instruction}</h3>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-6 mx-3 currScore\">\n          <h2 className=\"good\">{props.good}</h2>\n          <h2 className=\"unknown\">{props.unknown}</h2>\n        </div>\n        <div className=\"col-sm-6 mx-3 currScore\">\n          <h2 className=\"vulnerable\">{props.vulnerable}</h2>\n          <h2 className=\"threatened\">{props.threatened}</h2>\n        </div>\n        <div className=\"col-sm-12 mx-3 currScore\">\n          <h2 className=\"endangered\">{props.endangered}</h2>\n        </div>\n        <div className=\"col-sm-6 mx-3 currScore\">\n          <h4 className=\"score\">{props.currentScore}</h4>\n        </div>\n        <div className=\"col-sm-6 mx-3 currScore\">\n          <h4 className=\"score\">{props.highScore}</h4>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\n// class FishCard extends React.Component {\n\n// clicker = () => {\n//     this.props.handleOnClick(this.props.id)\n// };\n\n// render() {\n//     return (\n//         <div className=\"card\" onClick={this.clicker}>\n//             <div className=\"img-container\">\n//                 <img alt={this.props.species} src={this.props.image}/>\n//             </div>\n//             <div>{this.props.species}</div>\n//             <div>{this.props.status}</div>\n//         </div>\n//     );\n// }\n// }\n\nfunction FishCard(props) {\n  return (\n    <div className=\"card\">\n      <div onClick={() => props.removeFish(props.id)} className=\"img-container\">\n        <img alt={props.species} src={props.image} />\n      </div>\n      {/* <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Status:</strong> {props.status}\n          </li>\n        </ul>\n      </div> */}\n    </div>\n  );\n}\n\nexport default FishCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport Title from \"./components/Title\";\nimport FishCard from \"./components/FishCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport fish from \"./fish.json\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    fish,\n    resetFish: fish,\n    score: 0,\n    clickCount: 0,\n    hiCount: 0,\n    title: \"Let's Fish!\",\n    instruction: \"Point value for conservation status of each rockfish caught:\"\n  };\n\n  newHiCount = () => {\n    if(this.state.score > this.state.hiCount) {\n      this.setState({ hiCount: this.state.score});\n    };\n  }\n\n  releaseFish = () => {\n    // const fish = this.state.fish.map(fish => fish.id === id);\n    // this.setState({ resetFish: fish});\n    this.setState({ fish });\n    this.setState({clickCount: 0});\n    console.log(fish);\n  }\n\n  catchFish = (id) => {\n    if (this.state.clickCount === 6) {\n      // this.setState({ hiCount: this.newHiCount });\n      this.newHiCount();\n      this.setState({ clickCount: 0 });\n      this.setState({ score: 0 });\n      alert(\"You've caught your limit! You scored \" + this.state.score + \" points!\");\n      this.setState({ fish });\n    } else {\n      this.state.fish.sort(() => Math.random() - 0.5);\n      const fish = this.state.fish.filter(fish => fish.id === id);\n      console.log(fish);\n      if (fish[0].status === \"good\") {\n        alert(fish[0].commonName + \" Status: Good; Nice catch!\");\n        this.setState({ score: this.state.score + 15 });\n      }\n      if (fish[0].status === \"unknown\") {\n        alert(fish[0].commonName + \" Status: Unknown\");\n        this.setState({ score: this.state.score + 10 });\n      }\n      if (fish[0].status === \"vulnerable\") {\n        alert(fish[0].commonName + \": A Vulnerable species. Please follow safe catch and release procedures!\");\n        this.setState({ score: this.state.score + 1 });\n      }\n      if (fish[0].status === \"threatened\") {\n        alert(fish[0].commonName + \": A Threatened species. Please follow safe catch and release procedures!\");\n        this.setState({ score: this.state.score + 0 });\n      }\n      if (fish[0].status === \"endangered\") {\n        alert(\"You caught a \" + fish[0].commonName + \". NOOOOOOOOO! He's endangered!!!\");\n        this.setState({ score: 0 });\n\n        // this.setState({ clickCount: 0 });\n        // this.setState({resetFish: fish});\n        // console.log(fish);\n        this.releaseFish();\n        // this.clickCountToZero();\n      }\n      this.setState({ fish: this.state.fish.filter(fish => fish.id !== id) });\n      this.setState({ clickCount: this.state.clickCount + 1 });\n      console.log(this.state.clickCount);\n    }\n  };\n\n  clickCountToZero = () => {\n    this.setState({ clickCount: 0 });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title\n          title={this.state.title}\n          instruction={this.state.instruction}\n          good={\"Good = +15\"}\n          unknown={\"Unknown = +10\"}\n          vulnerable={\"Vulnerable = +1\"}\n          threatened={\"Threatened = 0\"}\n          endangered={\"Endangered = 'Current Score' is confiscated; returns to 0\"}\n          currentScore={\"Current Score: \" + this.state.score}\n          highScore={\"High Score: \" + this.state.hiCount}\n        />\n        {this.state.fish.map(fish => (\n          <FishCard\n            key={fish.id}\n            id={fish.id}\n            species={fish.commonName}\n            scientific={fish.sciName}\n            image={fish.image}\n            status={fish.status}\n            removeFish={this.catchFish}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}