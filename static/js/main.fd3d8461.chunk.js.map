{"version":3,"sources":["components/Title/index.js","components/FishCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","title","instruction","currentScore","highScore","FishCard","alt","species","src","image","status","onClick","removeFish","id","Wrapper","children","App","state","fish","currCount","hiCount","sort","Math","random","filter","console","log","setState","this","map","key","commonName","scientific","sciName","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8xTAsBeA,MAnBf,SAAeC,GACX,OACI,oCACA,6BACI,wBAAIC,UAAU,SAASD,EAAME,OAC7B,wBAAID,UAAU,eAAeD,EAAMG,cAEvC,yBAAKF,UAAU,OACf,yBAAKA,UAAU,2BACb,wBAAIA,UAAU,SAASD,EAAMI,eAE/B,yBAAKH,UAAU,yBACb,wBAAIA,UAAU,SAASD,EAAMK,e,MC4BxBC,MArBf,SAAkBN,GACd,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKM,IAAKP,EAAMQ,QAASC,IAAKT,EAAMU,SAEtC,yBAAKT,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAAMQ,SAEhC,4BACE,2CADF,IAC4BR,EAAMW,UAItC,0BAAMC,QAAS,kBAAMZ,EAAMa,WAAWb,EAAMc,KAAKb,UAAU,UAA3D,kB,MC/BOc,MAJf,SAAiBf,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMgB,W,OC4F5BC,G,kNAxFbC,MAAQ,CACNC,OACAC,UAAW,EACXC,QAAS,EACTnB,MAAO,cACPC,YAAa,kE,EAmDfU,WAAa,SAAAC,GACX,EAAKI,MAAMC,KAAKG,MAAK,kBAAMC,KAAKC,SAAW,MAC3C,IAAML,EAAO,EAAKD,MAAMC,KAAKM,QAAO,SAAAN,GAAI,OAAIA,EAAKL,KAAOA,KACxDY,QAAQC,IAAKR,GACb,EAAKS,SAAS,CAAET,U,uDAGR,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEjB,MAAO2B,KAAKX,MAAMhB,MAClBC,YAAa0B,KAAKX,MAAMf,YACxBC,aAAc,kBAAoByB,KAAKX,MAAME,UAC7Cf,UAAW,eAAiBwB,KAAKX,MAAMG,UAExCQ,KAAKX,MAAMC,KAAKW,KAAI,SAAAX,GAAI,OACvB,kBAAC,EAAD,CACEY,IAAKZ,EAAKL,GACVA,GAAIK,EAAKL,GACTN,QAASW,EAAKa,WACdC,WAAYd,EAAKe,QACjBxB,MAAOS,EAAKT,MACZC,OAAQQ,EAAKR,OACbE,WAAY,EAAKA,qB,GAjFXsB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.fd3d8461.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n    return (\n        <>\n        <div>\n            <h1 className=\"title\">{props.title}</h1>\n            <h3 className=\"instruction\">{props.instruction}</h3>\n        </div>\n        <div className=\"row\">\n        <div className=\"col-sm-6 mx-3 currScore\">\n          <h4 className=\"score\">{props.currentScore}</h4>\n        </div>\n        <div className=\"col-sm-6 mx-3 hiScore\">\n          <h4 className=\"score\">{props.highScore}</h4>\n        </div>\n      </div>\n      </>\n    );\n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\n// class FishCard extends React.Component {\n\n// clicker = () => {\n//     this.props.handleOnClick(this.props.id)\n// };\n\n// render() {\n//     return (\n//         <div className=\"card\" onClick={this.clicker}>\n//             <div className=\"img-container\">\n//                 <img alt={this.props.species} src={this.props.image}/>\n//             </div>\n//             <div>{this.props.species}</div>\n//             <div>{this.props.status}</div>\n//         </div>\n//     );\n// }\n// }\n\nfunction FishCard(props) {\n    return (\n      <div className=\"card\">\n        <div className=\"img-container\">\n          <img alt={props.species} src={props.image} />\n        </div>\n        <div className=\"content\">\n          <ul>\n            <li>\n              <strong>Name:</strong> {props.species}\n            </li>\n            <li>\n              <strong>Status:</strong> {props.status}\n            </li>\n          </ul>\n        </div>\n        <span onClick={() => props.removeFish(props.id)} className=\"remove\">ùòÖ</span>\n      </div>\n    );\n  }\n\nexport default FishCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport Title from \"./components/Title\";\nimport FishCard from \"./components/FishCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport fish from \"./fish.json\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    fish,\n    currCount: 0,\n    hiCount: 0,\n    title: \"Let's Fish!\",\n    instruction: \"There are 6 fishes on the 'Good' list. Can you catch them all?\"\n  };\n\n  // increaseScore = () => {\n  //   if(this.state.currCount < 15) {\n  //     this.setState({ currCount: this.state.currCount + 1 })\n  //   } else {\n  //     this.endGame();\n  //   }\n  // };\n\n  // resetScore = () => {\n  //   if(this.state.currCount > this.state.hiCount) {\n  //     this.setState({ hiCount: this.state.currCount })\n  //   };\n  //   this.setState({ currCount: 0 });\n  // };\n\n  // randomizeCards = () => {\n  //   this.state.fish.sort(() => Math.random() - 0.5);\n  // }\n\n  // endGame = () => {\n  //   this.setState({ currCount: this.state.currCount + 1 })\n  //   this.setState({ title: \"Fish Catcher!\" });\n  //   this.setState({ hiCount: 16 });\n  // }\n\n  // clicker = id => {\n  //   if(this.state.currCount !== 16) {\n  //   const selected = this.state.fish.filter(fsh => fsh.id === id);\n  //   console.log(selected)\n  //   if(selected[0].clicked === false) {\n  //     this.increaseScore();\n  //     selected[0].clicked = true;\n  //   } else {\n  //     this.resetScore();\n  //     this.state.fish.forEach((fish) => (\n  //       fish.clicked = false\n  //     ));\n  //   }\n  // } else {\n  //     this.resetScore();\n  //     this.state.fish.forEach((fish) => (\n  //       fish.clicked = false\n  //     ));\n  //     this.setState({ title: \"Fish Finder\" });\n  // }\n  //   this.randomizeCards();\n  // };\n\n  removeFish = id => {\n    this.state.fish.sort(() => Math.random() - 0.5);\n    const fish = this.state.fish.filter(fish => fish.id !== id);\n    console.log (fish);\n    this.setState({ fish });\n  };\n  \n  render() {\n    return (\n      <Wrapper>\n        <Title\n          title={this.state.title}\n          instruction={this.state.instruction}\n          currentScore={\"Current Score: \" + this.state.currCount}\n          highScore={\"High Score: \" + this.state.hiCount}\n          />\n        {this.state.fish.map(fish => (\n          <FishCard\n            key={fish.id}\n            id={fish.id}\n            species={fish.commonName}\n            scientific={fish.sciName}\n            image={fish.image}\n            status={fish.status}\n            removeFish={this.removeFish}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}